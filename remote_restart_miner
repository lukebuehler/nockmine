#!/usr/bin/env bash
# ------------------------------------------------------------
# remote_restart_miner [HOSTNAME]
#
# Restarts the nockchain miner service on a remote VM via SSH.
# If no hostname is provided, restarts miners on all VMs listed
# in the MINERS_SSH environment variable.
#
# Usage: 
#   ./remote_restart_miner hostname   # restart on specific host
#   ./remote_restart_miner            # restart on all hosts
# ------------------------------------------------------------

set -o pipefail  # Removed -e flag to avoid systemctl exit code issues

# ---------- 0. Colors for output ----------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ---------- 1. Locate repo root ------------------------------
REPO_ROOT="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# ---------- 2. Load .env -------------------------------------
if [[ -f "${REPO_ROOT}/.env" ]]; then
  set -a
  # shellcheck disable=SC1090
  source "${REPO_ROOT}/.env"
  set +a
else
  echo -e "${RED}ERROR: .env file not found. Please create one with MINERS_SSH variable.${NC}"
  echo "Example: MINERS_SSH=hz1,hz2,hz3"
  exit 1
fi

# ---------- 3. Parse arguments -------------------------------
if [[ $# -eq 1 ]]; then
  # Single hostname provided
  MINERS=("$1")
else
  # Use all miners from .env
  if [[ -z "${MINERS_SSH:-}" ]]; then
    echo -e "${RED}ERROR: MINERS_SSH variable not set in .env file.${NC}"
    echo "Please add: MINERS_SSH=hostname1,hostname2,hostname3"
    exit 1
  fi
  
  # Parse miners list
  IFS=',' read -ra MINERS <<< "${MINERS_SSH}"
fi

# ---------- 4. Function to restart miner on single host ----
restart_miner() {
  local hostname="$1"
  local service_name="nockchain-miner"
  
  echo -e "${BLUE}Restarting miner on ${hostname}...${NC}"
  
  # Test SSH connectivity
  if ! ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" 'exit 0' 2>/dev/null; then
    echo -e "${RED}  ❌ SSH connection failed${NC}"
    return 1
  fi
  
  # Check if service exists
  if ! ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "systemctl list-unit-files ${service_name}.service" 2>/dev/null | grep -q "${service_name}"; then
    echo -e "${RED}  ❌ Service ${service_name} not found${NC}"
    return 1
  fi
  
  # Get current service status
  local current_status
  current_status=$(ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "systemctl is-active ${service_name} 2>/dev/null || echo 'inactive'")
  
  echo -e "  Current status: ${current_status}"
  
  # Restart the service
  if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "sudo systemctl restart ${service_name}" 2>/dev/null; then
    echo -e "${GREEN}  ✅ Restart command sent successfully${NC}"
    
    # Wait a moment for the service to start
    sleep 2
    
    # Check new status
    local new_status
    new_status=$(ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "systemctl is-active ${service_name} 2>/dev/null || echo 'inactive'")
    
    if [[ "${new_status}" == "active" ]]; then
      echo -e "${GREEN}  ✅ Service is now active${NC}"
      
      # Get uptime info
      local uptime_info
      uptime_info=$(ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "systemctl show ${service_name} --property=ActiveEnterTimestamp --value 2>/dev/null || echo 'unknown'")
      if [[ "${uptime_info}" != "unknown" && -n "${uptime_info}" ]]; then
        echo -e "  Started: ${GREEN}${uptime_info}${NC}"
      fi
      
      return 0
    else
      echo -e "${RED}  ❌ Service failed to start (status: ${new_status})${NC}"
      
      # Show recent logs for debugging
      echo -e "  Recent logs:"
      ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "${hostname}" "journalctl -u ${service_name} -n 5 --no-pager" 2>/dev/null | sed 's/^/    /' || echo "    Unable to fetch logs"
      
      return 1
    fi
  else
    echo -e "${RED}  ❌ Failed to restart service${NC}"
    return 1
  fi
}

# ---------- 5. Main execution --------------------------------
echo -e "${BLUE}===========================================${NC}"
echo -e "${BLUE}      NOCKCHAIN MINER RESTART${NC}"
echo -e "${BLUE}===========================================${NC}"
echo ""

# Summary counters
total_miners=0
restarted_miners=0
failed_miners=0

# Restart each miner
for hostname in "${MINERS[@]}"; do
  # Trim whitespace
  hostname=$(echo "${hostname}" | xargs)
  
  if [[ -z "${hostname}" ]]; then
    continue
  fi
  
  ((total_miners++))
  
  if restart_miner "${hostname}"; then
    ((restarted_miners++))
  else
    ((failed_miners++))
  fi
  
  echo ""
done

# ---------- 6. Summary report --------------------------------
echo -e "${BLUE}===========================================${NC}"
echo -e "${BLUE}                SUMMARY${NC}"
echo -e "${BLUE}===========================================${NC}"
echo -e "Total miners: ${total_miners}"
echo -e "Successfully restarted: ${GREEN}${restarted_miners}${NC}"
echo -e "Failed to restart: ${RED}${failed_miners}${NC}"

if (( failed_miners == 0 )); then
  echo -e "${GREEN}🎉 All miners restarted successfully!${NC}"
else
  echo -e "${RED}🚨 Some miners failed to restart${NC}"
fi

echo ""
echo -e "${BLUE}===========================================${NC}"

# Exit with error code if any failures occurred
exit $((failed_miners > 0 ? 1 : 0))